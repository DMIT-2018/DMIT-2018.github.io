(window.webpackJsonp=window.webpackJsonp||[]).push([[4],{136:function(t,s,a){t.exports=a.p+"assets/img/Waiters.3d3686f0.png"},275:function(t,s,a){t.exports=a.p+"assets/img/Where-1.22638247.png"},276:function(t,s,a){t.exports=a.p+"assets/img/Where-2.1ad94230.png"},277:function(t,s,a){t.exports=a.p+"assets/img/Where-3.323454ce.png"},278:function(t,s,a){t.exports=a.p+"assets/img/Orderby-1.600bcf8e.png"},279:function(t,s,a){t.exports=a.p+"assets/img/Orderby-2.cdaac2e4.png"},280:function(t,s,a){t.exports=a.p+"assets/img/Orderby-3.f22bd7c5.png"},281:function(t,s,a){t.exports=a.p+"assets/img/Orderby-4.3d5100d9.png"},282:function(t,s,a){t.exports=a.p+"assets/img/Grouping-1.0bade2be.png"},283:function(t,s,a){t.exports=a.p+"assets/img/Grouping-2.853b5e18.png"},284:function(t,s,a){t.exports=a.p+"assets/img/Grouping-3.84518c08.png"},285:function(t,s,a){t.exports=a.p+"assets/img/Combined-1.bcb502b5.png"},286:function(t,s,a){t.exports=a.p+"assets/img/Combined-2.a612c417.png"},287:function(t,s,a){t.exports=a.p+"assets/img/Anon-2.d8ba20cd.png"},288:function(t,s,a){t.exports=a.p+"assets/img/Anon-1.95794504.png"},289:function(t,s,a){t.exports=a.p+"assets/img/Anon-3.7f9b57ea.png"},290:function(t,s,a){t.exports=a.p+"assets/img/Nested-1.610b06e4.png"},469:function(t,s,a){"use strict";a.r(s);var e=a(2),n=Object(e.a)({},(function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"c-expression"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#c-expression"}},[t._v("#")]),t._v(" C# Expression")]),t._v(" "),e("p",[t._v("LinqPad expression queries return the results from evaluating the LINQ query.")]),t._v(" "),e("h2",{attrs:{id:"select-all"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#select-all"}},[t._v("#")]),t._v(" Select All")]),t._v(" "),e("p",[t._v("The simplest way to get all the rows of a table is to just reference the table. In this case, there is no LINQ being used at all.")]),t._v(" "),e("div",{staticClass:"language-csharp extra-class"},[e("pre",{pre:!0,attrs:{class:"language-csharp"}},[e("code",[t._v("Waiters\n")])])]),e("p",[e("img",{attrs:{src:a(136),alt:"Waiters"}})]),t._v(" "),e("p",[t._v("The equivalent code using LINQ to get all the rows looks like this.")]),t._v(" "),e("div",{staticClass:"language-csharp extra-class"},[e("pre",{pre:!0,attrs:{class:"language-csharp"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" person "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Waiters")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("select")]),t._v(" person\n")])])]),e("p",[t._v("If the above statement was written using method syntax, it would look like this.")]),t._v(" "),e("div",{staticClass:"language-csharp extra-class"},[e("pre",{pre:!0,attrs:{class:"language-csharp"}},[e("code",[t._v("Waiters\n   "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Select "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("person "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" person"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),e("p",[e("img",{attrs:{src:a(136),alt:"Waiters"}})]),t._v(" "),e("hr"),t._v(" "),e("h2",{attrs:{id:"simple-where-clause"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#simple-where-clause"}},[t._v("#")]),t._v(" Simple Where Clause")]),t._v(" "),e("p",[t._v("Results from a select can be filtered by using a where clause, as in this example that checks the value in a given column.")]),t._v(" "),e("div",{staticClass:"language-csharp extra-class"},[e("pre",{pre:!0,attrs:{class:"language-csharp"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" row "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Tables")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("where")]),t._v(" row"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Capacity "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("select")]),t._v(" row\n")])])]),e("p",[t._v("This is also a good time to check out the output window on LinqPad to compare the "),e("em",[t._v("Results")]),t._v(", "),e("em",[t._v("λ (method syntax)")]),t._v(" and "),e("em",[t._v("SQL")]),t._v(" for the LINQ expression entered.")]),t._v(" "),e("div",{staticClass:"language-csharp extra-class"},[e("pre",{pre:!0,attrs:{class:"language-csharp"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// λ - Method syntax")]),t._v("\nTables\n   "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Where "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("row "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("row"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Capacity "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),e("p",[t._v("Remember that in this sample, "),e("code",[t._v("row")]),t._v(" is mearly a variable name; we could have named it anything we wanted. Also remember that the table called "),e("code",[t._v("Tables")]),t._v(" holds data about physical tables in the restaurant.")]),t._v(" "),e("p",[e("img",{attrs:{src:a(275),alt:"Where Results 1"}})]),t._v(" "),e("p",[t._v("Observe that the header of the results identifies the data type of the collection: "),e("code",[t._v("IOrderedQueryable<Table>")]),t._v(". Depending on the code you write in the LinqPad editor, the results could be a generic kind that is evaluated by generating SQL (one of the "),e("code",[t._v("IQueryable")]),t._v(" types) or producing an in-memory result ("),e("code",[t._v("IEnumerable")]),t._v(") or even a strongly-typed result (as in one of the examples on the bottom of the page). Also notice that in LinqPad, the Results window shows a column for the Bills and the Reservations. Clicking on those will bring up the bills & reservations that have been recorded on that table.")]),t._v(" "),e("p",[t._v('If you have experience in working with databases, you may be tempted to start "thinking in SQL", particularly when you see keywords such as '),e("code",[t._v("from")]),t._v(", "),e("code",[t._v("where")]),t._v(" and "),e("code",[t._v("select")]),t._v(". LINQ, however, is "),e("strong",[t._v("L")]),t._v("anguage "),e("strong",[t._v("IN")]),t._v("tegrated "),e("strong",[t._v("Q")]),t._v("ueries, meaning that the code you are writing is actually part of the C# (or VB) syntax. Keep that in mind, particularly as you look at writing the conditional expression in your "),e("code",[t._v("where")]),t._v(" clauses.")]),t._v(" "),e("div",{staticClass:"language-csharp extra-class"},[e("pre",{pre:!0,attrs:{class:"language-csharp"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" booking "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Reservations")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("where")]),t._v(" booking"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("EventCode"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("Equals")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"A"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("select")]),t._v(" booking\n")])])]),e("div",{staticClass:"custom-block tip"},[e("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),e("p",[t._v("Remember - LINQ is still C#, so expressing a boolean expression in the where clause is written as C# ("),e("em",[t._v("not SQL")]),t._v(").")])]),t._v(" "),e("p",[t._v("Notice that the method syntax makes uses of "),e("strong",[t._v("Lambda")]),t._v(" expressions. Lambdas are common when performing LINQ with the Method syntax.")]),t._v(" "),e("div",{staticClass:"language-csharp extra-class"},[e("pre",{pre:!0,attrs:{class:"language-csharp"}},[e("code",[t._v("Reservations\n   "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Where "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("booking "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" booking"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("EventCode"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Equals "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"A"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),e("div",{staticClass:"custom-block tip"},[e("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),e("p",[t._v("Note that in this example, we are using the "),e("code",[t._v(".Equals()")]),t._v(" method of the string class, rather than the equal-to sign "),e("code",[t._v("==")]),t._v(". The reason for this is that the EventCode column can contain "),e("code",[t._v("NULL")]),t._v(" values. Using the "),e("code",[t._v(".Equals()")]),t._v(" avoids the problem of possible database "),e("code",[t._v("NULL")]),t._v(" values causing a run-time error. Whenever a string column states it can hold "),e("code",[t._v("NULL")]),t._v(" values, use the "),e("code",[t._v(".Equals()")]),t._v(" when comparing values in your where clause.")])]),t._v(" "),e("p",[e("img",{attrs:{src:a(276),alt:"Where Result 2"}})]),t._v(" "),e("p",[t._v("Just to drive home the point, see this example that uses the C# "),e("code",[t._v("!")]),t._v(" operator. Also note that the column it is checking allows "),e("code",[t._v("NULL")]),t._v(" values, and in C# this is being represented as a "),e("strong",[t._v("nullable data type")]),t._v(".")]),t._v(" "),e("div",{staticClass:"language-csharp extra-class"},[e("pre",{pre:!0,attrs:{class:"language-csharp"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" booking "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Reservations")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("where")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("booking"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("EventCode"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("HasValue")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("select")]),t._v(" booking\n")])])]),e("p",[e("img",{attrs:{src:a(277),alt:"Where Results 3"}})]),t._v(" "),e("h3",{attrs:{id:"try-this"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#try-this"}},[t._v("#")]),t._v(" Try this")]),t._v(" "),e("ul",[e("li",[t._v("In the LinqPad example above, when you click on the Bills and Reservations, what does that tell you about the relationship between these and the Tables data?")])]),t._v(" "),e("hr"),t._v(" "),e("h2",{attrs:{id:"simple-orderby"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#simple-orderby"}},[t._v("#")]),t._v(" Simple OrderBy")]),t._v(" "),e("p",[t._v("By default, sorting is done in ascending order.")]),t._v(" "),e("div",{staticClass:"language-csharp extra-class"},[e("pre",{pre:!0,attrs:{class:"language-csharp"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" food "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Items")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("orderby")]),t._v(" food"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Description")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("select")]),t._v(" food\n")])])]),e("div",{staticClass:"language-csharp extra-class"},[e("pre",{pre:!0,attrs:{class:"language-csharp"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// λ - Method Syntax")]),t._v("\nItems\n   "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("OrderBy "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("food "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" food"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Description"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),e("p",[e("img",{attrs:{src:a(278),alt:"Orderby example 1 as Method Syntax - Results"}})]),t._v(" "),e("p",[t._v("You can specify the descending and ascending order explicitly.")]),t._v(" "),e("div",{staticClass:"language-csharp extra-class"},[e("pre",{pre:!0,attrs:{class:"language-csharp"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" food "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Items")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("orderby")]),t._v(" food"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("CurrentPrice")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("descending")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("select")]),t._v(" food\n")])])]),e("div",{staticClass:"language-csharp extra-class"},[e("pre",{pre:!0,attrs:{class:"language-csharp"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// λ - Method Syntax")]),t._v("\nItems\n   "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("OrderByDescending "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("food "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" food"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("CurrentPrice"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),e("p",[e("img",{attrs:{src:a(279),alt:"Orderby example 2 as Method Syntax - Results"}})]),t._v(" "),e("div",{staticClass:"language-csharp extra-class"},[e("pre",{pre:!0,attrs:{class:"language-csharp"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" food "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Items")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("orderby")]),t._v(" food"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Calories")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ascending")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("select")]),t._v(" food\n")])])]),e("div",{staticClass:"language-csharp extra-class"},[e("pre",{pre:!0,attrs:{class:"language-csharp"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// λ - Method Syntax")]),t._v("\nItems\n   "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("OrderBy "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("food "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" food"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Calories"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),e("p",[e("img",{attrs:{src:a(280),alt:"Orderby example 3 as Method Syntax - Results"}})]),t._v(" "),e("p",[t._v("You can sort by multiple columns.")]),t._v(" "),e("div",{staticClass:"language-csharp extra-class"},[e("pre",{pre:!0,attrs:{class:"language-csharp"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" food "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Items")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("orderby")]),t._v(" food"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("CurrentPrice")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("descending")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" food"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Calories")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ascending")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("select")]),t._v(" food\n")])])]),e("div",{staticClass:"language-csharp extra-class"},[e("pre",{pre:!0,attrs:{class:"language-csharp"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// λ - Method Syntax")]),t._v("\nItems\n   "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("OrderByDescending "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("food "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" food"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("CurrentPrice"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n   "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("ThenBy "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("food "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" food"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Calories"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),e("p",[e("img",{attrs:{src:a(281),alt:"Orderby example 4 as Method Syntax - Results"}})]),t._v(" "),e("hr"),t._v(" "),e("h2",{attrs:{id:"grouping"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#grouping"}},[t._v("#")]),t._v(" Grouping")]),t._v(" "),e("p",[t._v("Grouping can be used as a result in itself, without the "),e("code",[t._v("select")]),t._v(" clause. Grouping produces a result that has two parts: a Key value, and the grouped items.")]),t._v(" "),e("div",{staticClass:"language-csharp extra-class"},[e("pre",{pre:!0,attrs:{class:"language-csharp"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" food "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Items")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("group")]),t._v(" food by food"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("MenuCategoryID\n")])])]),e("div",{staticClass:"language-csharp extra-class"},[e("pre",{pre:!0,attrs:{class:"language-csharp"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// λ - Method Syntax")]),t._v("\nItems\n   "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("GroupBy "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("food "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" food"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("MenuCategoryID"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),e("p",[e("img",{attrs:{src:a(282),alt:"Grouping example 1 as Method Syntax - Results"}})]),t._v(" "),e("p",[t._v("Like ordering, grouping can include more than one column. All you have to do is use an anonymous type for your grouping condition.")]),t._v(" "),e("div",{staticClass:"language-csharp extra-class"},[e("pre",{pre:!0,attrs:{class:"language-csharp"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" food "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Items")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("group")]),t._v(" food by "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("food"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("MenuCategoryID"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" food"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("CurrentPrice"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),e("p",[t._v("Notice the use of "),e("code",[t._v("new {food.MenuCategoryID, food.CurrentPrice}")]),t._v(". This is an example of "),e("strong",[t._v("anonymous types")]),t._v(" (used in the grouping clause). You will read more about anonymous types in the result set of the select later on.")]),t._v(" "),e("div",{staticClass:"language-csharp extra-class"},[e("pre",{pre:!0,attrs:{class:"language-csharp"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// λ - Method Syntax")]),t._v("\nItems\n   "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("GroupBy "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n      food "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v("  \n        "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n          MenuCategoryID "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" food"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("MenuCategoryID"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n          CurrentPrice "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" food"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("CurrentPrice\n        "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n   "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),e("p",[e("img",{attrs:{src:a(283),alt:"Grouping example 2 as Method Syntax - Results"}})]),t._v(" "),e("p",[t._v("A group can become something from which you can select your actual data. All you have to do is give a name to the resulting group.")]),t._v(" "),e("div",{staticClass:"language-csharp extra-class"},[e("pre",{pre:!0,attrs:{class:"language-csharp"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" food "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Items")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("group")]),t._v(" food by food"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("MenuCategoryID")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("into")]),t._v(" result\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("select")]),t._v(" result\n")])])]),e("div",{staticClass:"language-csharp extra-class"},[e("pre",{pre:!0,attrs:{class:"language-csharp"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// λ - Method Syntax")]),t._v("\nItems\n   "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("GroupBy "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("food "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" food"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("MenuCategoryID"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n   "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Select "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("result "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" result"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),e("p",[e("img",{attrs:{src:a(284),alt:"Grouping example 3 as Method Syntax - Results"}})]),t._v(" "),e("hr"),t._v(" "),e("h2",{attrs:{id:"combining-clauses"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#combining-clauses"}},[t._v("#")]),t._v(" Combining Clauses")]),t._v(" "),e("p",[t._v("Combining clauses is simple, and the order of the "),e("code",[t._v("where")]),t._v(" and "),e("code",[t._v("orderby")]),t._v(" clauses (relative to each other) is not important. These two examples give the same result.")]),t._v(" "),e("div",{staticClass:"language-csharp extra-class"},[e("pre",{pre:!0,attrs:{class:"language-csharp"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" food "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Items")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("where")]),t._v(" food"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("MenuCategory"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Description "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Entree"')]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("orderby")]),t._v(" food"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("CurrentPrice")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("descending")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("select")]),t._v(" food\n")])])]),e("div",{staticClass:"language-csharp extra-class"},[e("pre",{pre:!0,attrs:{class:"language-csharp"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" food "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Items")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("orderby")]),t._v(" food"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("CurrentPrice")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("descending")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("where")]),t._v(" food"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("MenuCategory"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Description "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Entree"')]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("select")]),t._v(" food\n")])])]),e("div",{staticClass:"language-csharp extra-class"},[e("pre",{pre:!0,attrs:{class:"language-csharp"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// λ - Method Syntax")]),t._v("\nItems\n   "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Where "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("food "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("food"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("MenuCategory"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Description "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Entree"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n   "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("OrderByDescending "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("food "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" food"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("CurrentPrice"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),e("p",[e("img",{attrs:{src:a(285),alt:"Combined Clauses example 1 as Method Syntax - Results"}})]),t._v(" "),e("p",[t._v("This example gets the entrees and beverages, sorted by price and grouped by category.")]),t._v(" "),e("div",{staticClass:"language-csharp extra-class"},[e("pre",{pre:!0,attrs:{class:"language-csharp"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" food "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Items")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("where")]),t._v(" food"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("MenuCategory"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Description "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Entree"')]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v(" food"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("MenuCategory"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Description "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Beverage"')]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("orderby")]),t._v(" food"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("CurrentPrice")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("descending")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("group")]),t._v(" food by food"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("MenuCategoryID")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("into")]),t._v(" result\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("select")]),t._v(" result\n")])])]),e("div",{staticClass:"language-csharp extra-class"},[e("pre",{pre:!0,attrs:{class:"language-csharp"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// λ - Method Syntax")]),t._v("\nItems\n   "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Where "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n      food "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" \n            "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("food"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("MenuCategory"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Description "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Entree"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v(" \n               "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("food"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("MenuCategory"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Description "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Beverage"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n            "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n   "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n   "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("OrderByDescending "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("food "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" food"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("CurrentPrice"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n   "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("GroupBy "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("food "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" food"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("MenuCategoryID"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n   "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Select "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("result "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" result"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),e("p",[e("img",{attrs:{src:a(286),alt:"Combined Clauses example 2 as Method Syntax - Results"}})]),t._v(" "),e("hr"),t._v(" "),e("h2",{attrs:{id:"anonymous-types"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#anonymous-types"}},[t._v("#")]),t._v(" Anonymous Types")]),t._v(" "),e("p",[t._v("All of the examples so far demonstrated selecting the complete set of results or entire table sets. Because C# supports the concept of Anonymous Types – a feature of C# that stands apart from LINQ itself – we can select only the data we want to see, as in these exampes.")]),t._v(" "),e("p",[t._v("To identify what data you want in your select, simply name properties in the initializer list and assign the values from your query's result set.")]),t._v(" "),e("div",{staticClass:"language-csharp extra-class"},[e("pre",{pre:!0,attrs:{class:"language-csharp"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" food "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Items")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("where")]),t._v(" food"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("MenuCategory"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Description "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Entree"')]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" food"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Active")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("orderby")]),t._v(" food"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("CurrentPrice")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("descending")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("select")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    Description "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" food"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Description"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    Price "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" food"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("CurrentPrice"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    Calories "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" food"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Calories\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),e("div",{staticClass:"language-csharp extra-class"},[e("pre",{pre:!0,attrs:{class:"language-csharp"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// λ - Method Syntax")]),t._v("\nItems\n   "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Where "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("food "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("food"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("MenuCategory"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Description "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Entree"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" food"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Active"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n   "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("OrderByDescending "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("food "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" food"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("CurrentPrice"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n   "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Select "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n      food "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v("\n         "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v("  \n         "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            Description "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" food"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Description"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n            Price "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" food"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("CurrentPrice"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n            Calories "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" food"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Calories\n         "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n   "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),e("p",[e("img",{attrs:{src:a(287),alt:"Anonymous type example 1 as Method Syntax - Results"}})]),t._v(" "),e("p",[t._v("Part of the power of selecting into another type (anonymous or otherwise) is the ability to perform calculations")]),t._v(" "),e("div",{staticClass:"language-csharp extra-class"},[e("pre",{pre:!0,attrs:{class:"language-csharp"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" person "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Waiters")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("where")]),t._v(" person"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("ReleaseDate "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("select")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        Name "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" person"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("FirstName "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('" "')]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" person"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("LastName"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        Phone "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" person"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Phone"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        DaysEmployed "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("DateTime"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Today "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" person"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("HireDate"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Days\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),e("div",{staticClass:"language-csharp extra-class"},[e("pre",{pre:!0,attrs:{class:"language-csharp"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// λ - Method Syntax")]),t._v("\nWaiters\n   "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Where "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("person "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("person"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("ReleaseDate "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("DateTime"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("?")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n   "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Select "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n      person "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" \n         "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v("  \n         "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            Name "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("person"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("FirstName "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('" "')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" person"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("LastName"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" \n            Phone "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" person"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Phone"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" \n            DaysEmployed "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("DateTime"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Today "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" person"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("HireDate"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Days\n         "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n   "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),e("p",[e("img",{attrs:{src:a(288),alt:"Anonymous type example 2 as Method Syntax - Results"}})]),t._v(" "),e("div",{staticClass:"language-csharp extra-class"},[e("pre",{pre:!0,attrs:{class:"language-csharp"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" food "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Items")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("where")]),t._v(" food"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("MenuCategory"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Description "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Entree"')]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v(" food"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("MenuCategory"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Description "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Beverage"')]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("orderby")]),t._v(" food"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("CurrentPrice")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("descending")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("group")]),t._v(" food by food"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("MenuCategory")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("into")]),t._v(" foodGroup\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("select")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    Category "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" foodGroup"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Key"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Description"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    MenuItems "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" foodGroup"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("ToList")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),e("div",{staticClass:"language-csharp extra-class"},[e("pre",{pre:!0,attrs:{class:"language-csharp"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// λ - Method Syntax")]),t._v("\nItems\n   "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Where "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n      food "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" \n            "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("food"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("MenuCategory"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Description "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Entree"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v(" \n               "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("food"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("MenuCategory"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Description "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Beverage"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n            "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n   "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n   "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("OrderByDescending "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("food "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" food"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("CurrentPrice"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n   "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("GroupBy "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("food "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" food"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("MenuCategory"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n   "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Select "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n      foodGroup "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" \n         "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v("  \n         "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            Category "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" foodGroup"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Key"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Description"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" \n            MenuItems "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" foodGroup"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("ToList "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n         "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n   "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),e("p",[e("img",{attrs:{src:a(289),alt:"Anonymous type example 3 as Method Syntax - Results"}})]),t._v(" "),e("hr"),t._v(" "),e("h2",{attrs:{id:"nested-queries"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#nested-queries"}},[t._v("#")]),t._v(" Nested Queries")]),t._v(" "),e("p",[t._v("LINQ queries can be nested as well. When used together with navigation properties, it's possible to get very expressive results with straight-forward and readable queries.")]),t._v(" "),e("div",{staticClass:"language-csharp extra-class"},[e("pre",{pre:!0,attrs:{class:"language-csharp"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" cat "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("MenuCategories")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("where")]),t._v(" cat"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Description "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Appetizer"')]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v(" cat"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Description "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Entree"')]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("orderby")]),t._v(" cat"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Description")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("select")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  Description "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" cat"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Description"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  MenuItems "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" item "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" cat"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Items")]),t._v("\n              "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("where")]),t._v(" item"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Active")]),t._v("\n              "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("orderby")]),t._v(" item"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Description")]),t._v("\n              "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("select")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v("\n              "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                Description "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" item"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Description"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                Price "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" item"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("CurrentPrice"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                Calories "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" item"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Calories"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                Comment "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" item"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Comment\n              "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),e("div",{staticClass:"language-csharp extra-class"},[e("pre",{pre:!0,attrs:{class:"language-csharp"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// λ - Method Syntax")]),t._v("\nMenuCategories\n   "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Where "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("cat "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("cat"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Description "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Appetizer"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("cat"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Description "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Entree"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n   "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("OrderBy "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("cat "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" cat"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Description"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n   "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Select "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n      cat "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" \n         "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v("  \n         "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            Description "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" cat"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Description"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" \n            MenuItems "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" cat"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Items"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Where "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("item "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" item"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Active"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("OrderBy "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("item "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" item"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Description"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n               "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Select "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n                  item "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" \n                     "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v("  \n                     "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                        Description "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" item"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Description"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" \n                        Price "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" item"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("CurrentPrice"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" \n                        Calories "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" item"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Calories"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" \n                        Comment "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" item"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Comment\n                     "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n               "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n         "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n   "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),e("p",[e("img",{attrs:{src:a(290),alt:"Nested example 1 as Method Syntax - Results"}})])])}),[],!1,null,null,null);s.default=n.exports}}]);