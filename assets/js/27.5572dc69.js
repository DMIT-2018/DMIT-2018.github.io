(window.webpackJsonp=window.webpackJsonp||[]).push([[27],{199:function(e,t,i){e.exports=i.p+"assets/img/new_desktop_jan2018.de5988b3.png"},326:function(e,t,i){"use strict";i.r(t);var o=[function(){var e=this,t=e.$createElement,o=e._self._c||t;return o("div",{staticClass:"content"},[o("h1",{attrs:{id:"github-desktop-dvcs-exercise-2-marks"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#github-desktop-dvcs-exercise-2-marks","aria-hidden":"true"}},[e._v("#")]),e._v(" GitHub Desktop (DVCS) - Exercise (2 Marks)")]),e._v(" "),o("h1",{attrs:{id:"matching"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#matching","aria-hidden":"true"}},[e._v("#")]),e._v(" Matching")]),e._v(" "),o("p",[e._v("Match the following descriptions of the GitHub Desktop user-interface with the labels on the screen-shot.")]),e._v(" "),o("ol",[o("li",[e._v("Commits History/Changes")]),e._v(" "),o("li",[e._v("Sync (push/pull) with Origin")]),e._v(" "),o("li",[e._v("Alterations of committed item")]),e._v(" "),o("li",[e._v("General Operational Tools for Maintenance")]),e._v(" "),o("li",[e._v("Change branch")]),e._v(" "),o("li",[e._v("Current (selection of) repository")])]),e._v(" "),o("p",[o("img",{attrs:{src:i(199),alt:""}})]),e._v(" "),o("p",[e._v("Write the letter from the image into the matching item on the left.")]),e._v(" "),o("h1",{attrs:{id:"using-github-desktop"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#using-github-desktop","aria-hidden":"true"}},[e._v("#")]),e._v(" Using GitHub Desktop")]),e._v(" "),o("p",[e._v("Follow these steps to create a repository for your Visual Studio solution.")]),e._v(" "),o("ul",[o("li",[o("p",[e._v("Create a new blank Visual Studio solution in your local GitHub folder (under My Documents) and name it DVCS Exercise and check Create new Git repository. Then add a web application in your solution folder, naming it as DVCS_Website. Select Web Forms and ensure Authentication is Individaul User Accounts. Turn off Host in cloud. When you are done, close down Visual Studio, saving all your changes.")])]),e._v(" "),o("li",[o("p",[e._v("Drag the solution folder onto GitHub Desktop. This will allow you to add your repository folder into the list of repositories in github DeskTop. Make sure that you a .gitignore file in your repository folder.")])]),e._v(" "),o("li",[o("p",[e._v("Commit your visual studio files and solution.")])]),e._v(" "),o("li",[o("p",[e._v("Publish the repository to GitHub (you must leave it as a public repository for this execise only). This will sync its contents with your GitHub account.")])]),e._v(" "),o("li",[o("p",[e._v("Test that you did it correctly")]),e._v(" "),o("ul",[o("li",[e._v("Log off of your current computer, and log onto a different computer.")]),e._v(" "),o("li",[e._v("Using GitHub Desktop, clone your repository.")]),e._v(" "),o("li",[e._v("Open the solution and press CTRL + F5. If you did everything right, it should build and launch in the browser.")])])]),e._v(" "),o("li",[o("p",[e._v("Through your browser on GitHub.com, ensure that your repository has a README file. Click the green Create ReadMe.md file button. Add your name to this file. Commit the changes.")])]),e._v(" "),o("li",[o("p",[e._v('Open your Visual Studio solution – "DVCS Exercise.sln" – and modify your Site.master file by putting your name in the navigation bar (replacing the "Application name").')]),e._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[e._v('<a class="navbar-brand" runat="server" href="~/">Application name</a>\n')])])]),o("p",[e._v("Code to edit in Site.master")])]),e._v(" "),o("li",[o("p",[e._v("Commit your local changes, and synchronize your local and remote repositories.")])]),e._v(" "),o("li",[o("p",[e._v("Make five other changes to your solution (add web pages, etc.), committing each change separately. Be sure to use meaningful commit messages.")])])]),e._v(" "),o("h1",{attrs:{id:"short-answer-multiple-choice"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#short-answer-multiple-choice","aria-hidden":"true"}},[e._v("#")]),e._v(" Short Answer & Multiple Choice")]),e._v(" "),o("p",[e._v("Supply or identify the following short answer/multiple-choice questions.")]),e._v(" "),o("ol",[o("li",[o("p",[e._v("Under which menu item is the Show in Explorer option. ____________________________")])]),e._v(" "),o("li",[o("p",[e._v("Under which menu item can you Add or Clone repositories. ____________________________")])]),e._v(" "),o("li",[o("p",[e._v("Under which menu item can you open your Command Prompt. ____________________________")])]),e._v(" "),o("li",[o("p",[e._v("List the four views that you can change to under View.")])]),e._v(" "),o("li",[o("p",[e._v("List the two items you can edit under Repository → Repository settings ….")])]),e._v(" "),o("li",[o("p",[e._v("A remote repository is .")]),e._v(" "),o("ol",[o("li",[e._v("A code repository that is on your local computer.")]),e._v(" "),o("li",[e._v("A database that is seldom used/accessed by an application (typically, a dormant web application).")]),e._v(" "),o("li",[e._v("A code repository that is not on your local computer.")]),e._v(" "),o("li",[e._v("A code repository that is kept in a location outside the continental USA.")])])]),e._v(" "),o("li",[o("p",[e._v("A local repository is .")]),e._v(" "),o("ol",[o("li",[e._v("A code repository that is on your local computer.")]),e._v(" "),o("li",[e._v("A database whose connection string specifies "),o("code",[e._v('data-source="."')]),e._v(".")]),e._v(" "),o("li",[e._v("A code repository that is not on your local computer.")]),e._v(" "),o("li",[e._v("A code repository that is kept in a location inside the continental USA.")])])]),e._v(" "),o("li",[o("p",[e._v("The remote repository that you synchronize with referred to as .")]),e._v(" "),o("ol",[o("li",[e._v("upstream")]),e._v(" "),o("li",[e._v("downstream")]),e._v(" "),o("li",[e._v("origin")]),e._v(" "),o("li",[e._v("clone")])])]),e._v(" "),o("li",[o("p",[e._v("When you make a local copy of a GitHub repository, you are effectively that repository.")]),e._v(" "),o("ol",[o("li",[e._v("forking")]),e._v(" "),o("li",[e._v("cloning")]),e._v(" "),o("li",[e._v("copying")]),e._v(" "),o("li",[e._v("replacing")])])]),e._v(" "),o("li",[o("p",[e._v("What is the order of Git tasks that are done when performing a sync in GitHub Desktop?")])]),e._v(" "),o("li",[o("p",[e._v("push, fetch, pull")])]),e._v(" "),o("li",[o("p",[e._v("fetch, merge, push")])]),e._v(" "),o("li",[o("p",[e._v("push, pull, clean")])]),e._v(" "),o("li",[o("p",[e._v("The git pull command is equivalent to")])]),e._v(" "),o("li",[o("p",[o("code",[e._v("git fetch")]),e._v(" and then "),o("code",[e._v("git merge")])])]),e._v(" "),o("li",[o("p",[o("code",[e._v("git pull")]),e._v(" and then "),o("code",[e._v("git fetch")])])]),e._v(" "),o("li",[o("p",[o("code",[e._v("git get")]),e._v(" and then "),o("code",[e._v("git pull")])])]),e._v(" "),o("li",[o("p",[o("code",[e._v("git fetch")]),e._v(" and then "),o("code",[e._v("git pull")])])]),e._v(" "),o("li",[o("p",[e._v("Which command is used to create a git repository?")])]),e._v(" "),o("li",[o("p",[o("code",[e._v("git repo")])])]),e._v(" "),o("li",[o("p",[o("code",[e._v("git pull")])])]),e._v(" "),o("li",[o("p",[o("code",[e._v("git clone")])])]),e._v(" "),o("li",[o("p",[o("code",[e._v("git init")])])]),e._v(" "),o("li",[o("p",[e._v("Which command is used to stage files for a commit?")])]),e._v(" "),o("li",[o("p",[o("code",[e._v("git pull")])])]),e._v(" "),o("li",[o("p",[o("code",[e._v("git add .")])])]),e._v(" "),o("li",[o("p",[o("code",[e._v("git push")])])]),e._v(" "),o("li",[o("p",[o("code",[e._v("git init")])])]),e._v(" "),o("li",[o("p",[e._v("Which of the following best describes what it means to stage files for a commit?")])]),e._v(" "),o("li",[o("p",[e._v("To stage files for a commit means to remove them from tracking in preparation for a commit.")])]),e._v(" "),o("li",[o("p",[e._v("Staging files for a commit means to identify files that may be new, modified, or deleted and marking those as being ready to commit.")])]),e._v(" "),o("li",[o("p",[e._v("Staging files for a commit means that the files are stashed so that they will be remembered after performing a pull and push.")])]),e._v(" "),o("li",[o("p",[e._v("To stage files for a commit means to change the files prior to committing them.")])]),e._v(" "),o("li",[o("p",[e._v("Which command saves a snapshot of the changes to files in the repository?")])]),e._v(" "),o("li",[o("p",[o("code",[e._v('git commit -m "Commit message"')])])]),e._v(" "),o("li",[o("p",[o("code",[e._v('git save -m "Save message"')])])]),e._v(" "),o("li",[o("p",[o("code",[e._v("git push")])])]),e._v(" "),o("li",[o("p",[o("code",[e._v("git pull")])])]),e._v(" "),o("li",[o("p",[e._v("Which of the following best describes what "),o("code",[e._v("git commit")]),e._v(" does?")])]),e._v(" "),o("li",[o("p",[e._v("Confirms the deletion of files in the repository history.")])]),e._v(" "),o("li",[o("p",[e._v("Prepare files for being added (tracked) in the repository.")])]),e._v(" "),o("li",[o("p",[e._v("Record a snapshot of the changes that have happened in the repository since the last commit.")])]),e._v(" "),o("li",[o("p",[e._v("It performs transactional processing to synchronize remote and local repositories.")])]),e._v(" "),o("li",[o("p",[e._v('Reverses the previous snapshot of the state of the repository so that you can "undo" the edits of your source code.')])])])])}],s=i(0),a=Object(s.a)({},function(){this.$createElement;this._self._c;return this._m(0)},o,!1,null,null,null);t.default=a.exports}}]);