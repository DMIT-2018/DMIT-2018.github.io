(window.webpackJsonp=window.webpackJsonp||[]).push([[44],{349:function(t,e,o){t.exports=o.p+"assets/img/new_desktop_jan2018.de5988b3.png"},511:function(t,e,o){"use strict";o.r(e);var i=o(24),s=Object(i.a)({},function(){var t=this,e=t.$createElement,i=t._self._c||e;return i("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[i("h1",{attrs:{id:"github-desktop-dvcs-exercise-2-marks"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#github-desktop-dvcs-exercise-2-marks","aria-hidden":"true"}},[t._v("#")]),t._v(" GitHub Desktop (DVCS) - Exercise (2 Marks)")]),t._v(" "),i("h1",{attrs:{id:"using-github-desktop"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#using-github-desktop","aria-hidden":"true"}},[t._v("#")]),t._v(" Using GitHub Desktop")]),t._v(" "),i("p",[t._v("Follow these steps to create a repository for your Visual Studio solution.")]),t._v(" "),i("ul",[i("li",[i("p",[t._v("Create a new blank Visual Studio solution in your local GitHub folder (under My Documents) and name it DVCS Exercise and check Create new Git repository. Then add a web application in your solution folder, naming it as DVCS_Website. Select Web Forms and ensure Authentication is Individaul User Accounts. Turn off Host in cloud. When you are done, close down Visual Studio, saving all your changes.")])]),t._v(" "),i("li",[i("p",[t._v("Drag the solution folder onto GitHub Desktop. This will allow you to add your repository folder into the list of repositories in github DeskTop. Make sure that you a .gitignore file in your repository folder.")])]),t._v(" "),i("li",[i("p",[t._v("Commit your visual studio files and solution.")])]),t._v(" "),i("li",[i("p",[t._v("Publish the repository to GitHub (you must leave it as a "),i("strong",[t._v("public")]),t._v(" repository for this execise only). This will sync its contents with your GitHub account.")])]),t._v(" "),i("li",[i("p",[t._v("Test that you did it correctly")]),t._v(" "),i("ul",[i("li",[t._v("Log off of your current computer, and log onto a different computer.")]),t._v(" "),i("li",[t._v("Using GitHub Desktop, clone your repository.")]),t._v(" "),i("li",[t._v("Open the solution and press CTRL + F5. If you did everything right, it should build and launch in the browser.")])])]),t._v(" "),i("li",[i("p",[t._v("Through your browser on GitHub.com, ensure that your repository has a README file. Click the green Create ReadMe.md file button. Add your name to this file. Commit the changes.")])]),t._v(" "),i("li",[i("p",[t._v('Open your Visual Studio solution – "DVCS Exercise.sln" – and modify your Site.master file by putting your name in the navigation bar (replacing the "Application name").')]),t._v(" "),i("div",{staticClass:"language-html extra-class"},[i("pre",{pre:!0,attrs:{class:"language-html"}},[i("code",[i("span",{attrs:{class:"token tag"}},[i("span",{attrs:{class:"token tag"}},[i("span",{attrs:{class:"token punctuation"}},[t._v("<")]),t._v("a")]),t._v(" "),i("span",{attrs:{class:"token attr-name"}},[t._v("class")]),i("span",{attrs:{class:"token attr-value"}},[i("span",{attrs:{class:"token punctuation"}},[t._v("=")]),i("span",{attrs:{class:"token punctuation"}},[t._v('"')]),t._v("navbar-brand"),i("span",{attrs:{class:"token punctuation"}},[t._v('"')])]),t._v(" "),i("span",{attrs:{class:"token attr-name"}},[t._v("runat")]),i("span",{attrs:{class:"token attr-value"}},[i("span",{attrs:{class:"token punctuation"}},[t._v("=")]),i("span",{attrs:{class:"token punctuation"}},[t._v('"')]),t._v("server"),i("span",{attrs:{class:"token punctuation"}},[t._v('"')])]),t._v(" "),i("span",{attrs:{class:"token attr-name"}},[t._v("href")]),i("span",{attrs:{class:"token attr-value"}},[i("span",{attrs:{class:"token punctuation"}},[t._v("=")]),i("span",{attrs:{class:"token punctuation"}},[t._v('"')]),t._v("~/"),i("span",{attrs:{class:"token punctuation"}},[t._v('"')])]),i("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("Application name"),i("span",{attrs:{class:"token tag"}},[i("span",{attrs:{class:"token tag"}},[i("span",{attrs:{class:"token punctuation"}},[t._v("</")]),t._v("a")]),i("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])])])]),t._v(" "),i("li",[i("p",[t._v("Commit your local changes, and synchronize your local and remote repositories.")])]),t._v(" "),i("li",[i("p",[t._v("Make five other changes to your solution (add web pages, etc.), committing each change separately. Be sure to use meaningful commit messages.")])])]),t._v(" "),i("h1",{attrs:{id:"matching"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#matching","aria-hidden":"true"}},[t._v("#")]),t._v(" Matching")]),t._v(" "),i("p",[t._v("Match the following descriptions of the GitHub Desktop user-interface with the labels on the screen-shot. Place your answers in the "),i("code",[t._v("ReadMe.md")]),t._v(" file of your repository for this exercise. Clearly identify your question number and your answer.")]),t._v(" "),i("ol",[i("li",[t._v("Commits History/Changes")]),t._v(" "),i("li",[t._v("Sync (push/pull) with Origin")]),t._v(" "),i("li",[t._v("Alterations of committed item")]),t._v(" "),i("li",[t._v("General Operational Tools for Maintenance")]),t._v(" "),i("li",[t._v("Change branch")]),t._v(" "),i("li",[t._v("Current (selection of) repository")])]),t._v(" "),i("p",[i("img",{attrs:{src:o(349),alt:""}})]),t._v(" "),i("h1",{attrs:{id:"short-answer-multiple-choice"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#short-answer-multiple-choice","aria-hidden":"true"}},[t._v("#")]),t._v(" Short Answer & Multiple Choice")]),t._v(" "),i("p",[t._v("Supply or identify the following short answer/multiple-choice questions. Place your answers in the "),i("code",[t._v("ReadMe.md")]),t._v(" file of your repository for this exercise. Clearly identify your question number and your answer.")]),t._v(" "),i("ol",[i("li",[t._v("Under which menu item is the Show in Explorer option. ____________________________")]),t._v(" "),i("li",[t._v("Under which menu item can you Add or Clone repositories. ____________________________")]),t._v(" "),i("li",[t._v("Under which menu item can you open your Command Prompt. ____________________________")]),t._v(" "),i("li",[t._v("List the four views that you can change to under View.")]),t._v(" "),i("li",[t._v("List the two items you can edit under Repository → Repository settings ...")]),t._v(" "),i("li",[t._v("A remote repository is ________.\n"),i("ol",[i("li",[t._v("A code repository that is on your local computer.")]),t._v(" "),i("li",[t._v("A database that is seldom used/accessed by an application (typically, a dormant web application).")]),t._v(" "),i("li",[t._v("A code repository that is not on your local computer.")]),t._v(" "),i("li",[t._v("A code repository that is kept in a location outside the continental USA.")])])]),t._v(" "),i("li",[t._v("A local repository is ________.\n"),i("ol",[i("li",[t._v("A code repository that is on your local computer.")]),t._v(" "),i("li",[t._v("A database whose connection string specifies "),i("code",[t._v('data-source="."')]),t._v(".")]),t._v(" "),i("li",[t._v("A code repository that is not on your local computer.")]),t._v(" "),i("li",[t._v("A code repository that is kept in a location inside the continental USA.")])])]),t._v(" "),i("li",[t._v("The remote repository that you synchronize with referred to as _________.\n"),i("ol",[i("li",[t._v("upstream")]),t._v(" "),i("li",[t._v("downstream")]),t._v(" "),i("li",[t._v("origin")]),t._v(" "),i("li",[t._v("clone")])])]),t._v(" "),i("li",[t._v("When you make a local copy of a GitHub repository, you are effectively ______ that repository.\n"),i("ol",[i("li",[t._v("forking")]),t._v(" "),i("li",[t._v("cloning")]),t._v(" "),i("li",[t._v("copying")]),t._v(" "),i("li",[t._v("replacing")])])]),t._v(" "),i("li",[t._v("What is the order of Git tasks that are done when performing a sync in GitHub Desktop?\n"),i("ol",[i("li",[t._v("push, fetch, pull")]),t._v(" "),i("li",[t._v("fetch, merge, push")]),t._v(" "),i("li",[t._v("push, pull, clean")])])]),t._v(" "),i("li",[t._v("The git pull command is equivalent to _______.\n"),i("ol",[i("li",[i("code",[t._v("git fetch")]),t._v(" and then "),i("code",[t._v("git merge")])]),t._v(" "),i("li",[i("code",[t._v("git pull")]),t._v(" and then "),i("code",[t._v("git fetch")])]),t._v(" "),i("li",[i("code",[t._v("git get")]),t._v(" and then "),i("code",[t._v("git pull")])]),t._v(" "),i("li",[i("code",[t._v("git fetch")]),t._v(" and then "),i("code",[t._v("git pull")])])])]),t._v(" "),i("li",[t._v("Which command is used to create a git repository?\n"),i("ol",[i("li",[i("code",[t._v("git repo")])]),t._v(" "),i("li",[i("code",[t._v("git pull")])]),t._v(" "),i("li",[i("code",[t._v("git clone")])]),t._v(" "),i("li",[i("code",[t._v("git init")])])])]),t._v(" "),i("li",[t._v("Which command is used to stage files for a commit?\n"),i("ol",[i("li",[i("code",[t._v("git pull")])]),t._v(" "),i("li",[i("code",[t._v("git add .")])]),t._v(" "),i("li",[i("code",[t._v("git push")])]),t._v(" "),i("li",[i("code",[t._v("git init")])])])]),t._v(" "),i("li",[t._v("Which of the following best describes what it means to stage files for a commit?\n"),i("ol",[i("li",[t._v("To stage files for a commit means to remove them from tracking in preparation for a commit.")]),t._v(" "),i("li",[t._v("Staging files for a commit means to identify files that may be new, modified, or deleted and marking those as being ready to commit.")]),t._v(" "),i("li",[t._v("Staging files for a commit means that the files are stashed so that they will be remembered after performing a pull and push.")]),t._v(" "),i("li",[t._v("To stage files for a commit means to change the files prior to committing them.")])])]),t._v(" "),i("li",[t._v("Which command saves a snapshot of the changes to files in the repository?\n"),i("ol",[i("li",[i("code",[t._v('git commit -m "Commit message"')])]),t._v(" "),i("li",[i("code",[t._v('git save -m "Save message"')])]),t._v(" "),i("li",[i("code",[t._v("git push")])]),t._v(" "),i("li",[i("code",[t._v("git pull")])])])]),t._v(" "),i("li",[t._v("Which of the following best describes what "),i("code",[t._v("git commit")]),t._v(" does?\n"),i("ol",[i("li",[t._v("Confirms the deletion of files in the repository history.")]),t._v(" "),i("li",[t._v("Prepare files for being added (tracked) in the repository.")]),t._v(" "),i("li",[t._v("Record a snapshot of the changes that have happened in the repository since the last commit.")]),t._v(" "),i("li",[t._v("It performs transactional processing to synchronize remote and local repositories.")]),t._v(" "),i("li",[t._v('Reverses the previous snapshot of the state of the repository so that you can "undo" the edits of your source code.')])])])])])},[],!1,null,null,null);e.default=s.exports}}]);